#!/usr/bin/python3
from ast import Not
import sys
import math
import csv
import re
import time
import csv

def compute_prob(data):
    prob = 0
    for i in range(1, len(sys.argv)):
        prob += data[i - 1] * (i - 1)
    prob /= 10000
    return prob

def bin(x, i):
    return (math.factorial(100) / (math.factorial(i) * math.factorial(100 - i))) * (x ** i) * ((1 - x) ** (100 - i))

def main():
    if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
        exit (0)
    if (len(sys.argv) != 10):
        exit (84)
    data = []
    try:
        for i in range(1, len(sys.argv)):
            data.append(int(sys.argv[i]))
            if (data[-1] < 0):
                exit(84)
    except:
        exit (84)
    res_v = []
    res_n = []
    res_v.append(data[0])
    res_n.append(0)

    for i in range(1, 9):
        res_v.append(data[i])
        res_n.append(i)
    k = 0
    while (k < 3):
        if (res_v[-1 -k] < 10):
            res_v[-2 -k] += res_v[-1 -k]
            del res_v[-1 -k]
            #res_n[-2 -k] = res_n[-1 -k]
            del res_n[-1 -k]
            k = 0
            continue
        if (res_v[1 + k] < 10):
            res_v[1 + k] += res_v[0 + k]
            del res_v[0 + k]
            del res_n[1 + k]
            k = 0
            continue
        if (res_v[0 + k] < 10):
            res_v[1 + k] += res_v[0 + k]
            del res_v[0 + k]
            del res_n[1 + k]
            k = 0
            continue
        k += 1


    # for i in range(1, 9):
    #     if data[9 - i] < 10:
    #         res_v[-1] += data[i]
    #     else:
    #         res_v.append(data[i])
    #         res_n.append(i)
    print("   x\t| ", end='')




    for i in range(0, len(res_n) - 1):
        if res_n[i + 1] - res_n[i] != 1:
            print("%i-%i\t| " % (res_n[i], res_n[i + 1] - 1), end='')
        else:
            print("%i\t| " % (res_n[i]), end='')
    print("%i+\t| " % (res_n[-1]), end='')
    print("Total")
    #print("   x\t| 0-1\t| 2\t| 3\t| 4\t| 5\t| 6\t| 7+\t| Total")
    print("  Ox\t| ", end='')
    count = 0
    for i in range(0, len(res_v)):
        count += res_v[i]
        print("%i\t| " % (res_v[i]), end='')
    if (count != 100):
        exit (84)
    print("100")

    prob = compute_prob(data)

    print("  Tx\t| ", end='')
    total = []
    for i in range(0, 8):
        total.append((math.factorial(100) / (math.factorial(i) * math.factorial(100 - i))) * (prob ** i) * ((1 - prob) ** (100 - i)))
    for i in range(0, len(res_n) - 1):
        if res_n[i + 1] - res_n[i] != 1:
            r = 0
            for j in range(res_n[i], res_n[i + 1]):
                r += total[j]
            print("%.1f\t| " % (round(r * 100, 1)), end='')
        else:
            print("%.1f\t| " % (round(total[res_n[i]] * 100, 1)), end='')
    aaa = 0
    for i in range(0, res_n[-1]):
        aaa += total[i]
    total.append((100 - aaa * 100) / 100)
    print("%.1f\t| " % (round(total[-1] * 100, 1)), end='')
    print("100")
    #print("  0x\t| %i\t| %i\t| %i\t| %i\t| %i\t| %i\t| %i\t| 100" % (10, 10, 10, 10, 10, 10, 10))
    #print("  Tx\t| %.1f\t| %.1f\t| %.1f\t| %.1f\t| %.1f\t| %.1f\t| %.1f\t| 100" % (round(0, 1), round(0, 1), round(0, 1), round(0, 1), round(0, 1), round(0, 1), round(0, 1)))
    print("Distribution:\t\tB(100, %.4f)" % (round(prob, 4)))
    
    
    rtu = 0
    for i in range(0, len(res_n) - 1):
        r = 0
        if res_n[i + 1] - res_n[i] != 1:
            for j in range(res_n[i], res_n[i + 1]):
                r += total[j] * 100
        else:
            r = total[res_n[i]] * 100
        #print("%f - %f ^ 2 / %f = %f" % (res_v[i], r, r, pow(res_v[i] - r, 2) / r))
        rtu += pow(res_v[i] - r, 2) / r
    r = total[-1] * 100
    #print("%f - %f ^ 2 / %f = %f" % (res_v[-1], r, r, pow(res_v[-1] - r, 2) / r))
    rtu += pow(res_v[-1] - r, 2) / r
    
    print("Chi-squared:\t\t%.3f" % (round(rtu, 3)))
    number_of_column = len(res_n)

    if (number_of_column - 3 < 0):
        exit (84)
    
    print("Degrees of freedom:\t%i" % (number_of_column - 2))
    DISTRIBUTION_TABLE = ([
        [99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1]
        ,[0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63]
        ,[0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21]
        ,[0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34]
        ,[0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28]
        ,[0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.39, 15.09]
        ,[0.87, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81]
        ,[1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48]
        ,[1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09]
        ,[2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67]
        ,[2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]
    ])

    high = 999
    for i in range(0, len(DISTRIBUTION_TABLE[number_of_column - 2])):
        if rtu <= DISTRIBUTION_TABLE[number_of_column - 2][i]:
            high = i
            break
    if high == 0:
        print("Fit validity:\t\tP > 99%")
        return
    if high == 999:
        print("Fit validity:\t\tP < 1%")
        return
    print("Fit validity:\t\t%i%% < P < %i%%" % (DISTRIBUTION_TABLE[0][high], DISTRIBUTION_TABLE[0][high - 1]))

try:
    main()
except:
    exit(84)